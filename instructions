1- Deploy del portafolio a Githbu pages

para esto primero tenemos que ir a github y en nuestro perfil crear un nuevo repositiorio 'pagespeed-insights' por ejemplo

no cambiamos nada en las configuraciones y lo creamos, luego como vamos a usar nuestro proyecto que hicimos del curso responsive design 

vamos copiamos esa carpeta le cambiamos el nombre en este caso escogimos 'pagespeed-insights'

lo siguiente es entrar a esa carpeta por consola e niciar un repositorio nuevo ahi 

git init 

luego  git status


como vemos tenemos archivos que estan en untracked asi que hacemos add de todos

git add -A


ahora hay que hacer commit

git commit -m 'page speed base'

git  log y vemos que va bien

ahora tenemos que unirlo con ese repositorio que creamos en github hacer deploy, para esto vamos  a github donde dejamos el repo creado, vemos que las opciones https y ssh esten y que escogimos ssh 

copiamos el primer comando de esta opcion, y lo ejecutamos

…or push an existing repository from the command line

git remote add origin git@github.com:Evertcolombia/pagespeed-insights.git


//luego vamos a hacer push de master a ese repositorio

git push -u origin master

//listo volvemos a github recargamos donde estabamos y vemos nuestros archivos ahi

ahora gracias a que tenemos un inde.html en nuestros archivos, podemos hacer un  GITHUB PAGES

vamos settings  buscamos Github Pages, donde dice none le pasamos a que use nuestro branch master y con esrto nos crea un sitio web

recargamos  y volvemos a github pages y ahi vemos una ruta es la de nuestra pagina que nos creo github  porque hicimos deploy,  entramos al enlace

//por ultimo volvemos al repositorio en github y  hacemos en best -practice en en edit , pegamos ahi la url, para que la gente que visite nuestro repo pueda verlo en display para el usuario


2- Google PageSpeed Insights

para esta clase vamos a google pagespeed insights y copiamos ahi nuestra url para analizarla

y ahi vemos que luego del analisis nos muestra una serie de recomendaciones y guias para hacer estre trabajo de optimizacion



3-Eliminando bloqueos de visualización, fuentes


La primera optimización que vamos a realizar a nuestro sitio tiene que ver con eliminar cualquier carga que afecte al renderizado de nuestro sitio. Específicamente tiene que encontrarse libre el Above the fold, la primera parte visible para el usuario sin necesidad de hacer scroll.


en google pagespeed insights nos dice que algo bueno seria eliminar el css y el javascript de la mitad superior de la pagina,  este concepto es  el Above the fold, entonces en esa parte no deberiamos estar cargando archivos de css o js o cualquier cosa que bloquee re renderizado de nuestra pagina

esto sucede porque estamos insertando cosas como la hoja de estilos en el head, antes de que se cargue el contenido de nuestra pagina, igual el cdn a google fonts, entonces lo que ocurre es que haciendo esos request toma tiempo y luego puede continuar leyendo lo siguiente de nuestro sitio web

entonces no hagamos esos llamados a ese tipo de arvhios en el head,  usemos una solucion


vamos al codigo del proecto index.html y tomemos esos link y los llevamos hasta abajo del footer  los del css y las fuentes

ahora para volver  a hacer el puntaje de google pagessped insights, primero tenemos que hacer deploy de nuestro proyecto en github, y para esto primero tenemos que enviar otro commit y un push

git status

git add -A 

git commit -m 'render block'

git push origin master

ya con esto vamos a ver nuestro sitio we actualizado pero  ete toma unos segundos so keep the calm

para verificar el cambio podemos ir a la url y en el inspector podemos verificar que nuestros link bajaron abajo del footer

cuandoc vemos eso podemos ir a pagespeed insights y analizar de nuevo la pagina


ahora verifiquemos un efecto dentro de nuestro website en el isnpector, nos pnemos en network, y en la opcion online  le ponemos slow 3G y recargamos la pagina con ctrl + shift + r

vemos como es que se carga la pagina  y vemos que uestra pagina ahora se renderiza con el contenido visible y luego si carga la fuente y despues el css

ahora unos cambios prudentes que nos faltan pueden ser ponerle al h1 un max-width de 500px en el css, tambien cambiemos el tipo de fuente que carga por defecto antes que cargue la que traemos de googlefonts usemos la propiedad system-ui, para esto seleccionamos todos los llamados a sans-serif y los remplazamos por system-ui 

guardamos y mandemos eso a hacer deploy
git status
git add -A
git commit -m 'add system-ui'
git push origin master

ahora verifiquemos en la url de nuestro website viendo el inspector que al recargar tome los cambios, en este caso viendo que cambio el sans-serif


Algo que podemos hacer  particularmente con las fuentes cuando las cargo por medio de google es llamarlas de forma asincrona por medio de JS, pero esto lo podemos hacer despues

``<scriptsrc="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js"></script>
  <script>
    WebFont.load({
      google: {
        families: ['nombreDeLaFuente:PesoDeLaFuente,PesoDeLaFuente2']
      }
    });
  </script>`````
Y al igual que como lo menciona @LeonidasEsteban se coloca después del footer y no antes. 



4-Comprimiendo Hojas de estilo

Continuando con nuestra optimización en esta clase vamos a comprimir nuestra hoja de estilos. Esto se puede hacer de muchas maneras, ya sea utilizando preprocesadores como Sass, Less o Stylus, o también puedes utilizar Webpack, para fines de este curso haremos uso del sitio CSS Compressor.

https://csscompressor.com/

copiamos el codigo en style.css  y lo pegamos ahi en ese sitio web y lo comprimimos, copiamos ese codigo comprimido y lo pegamos en un nuevo archivo en nuestro documento

style.min.css
 y ya vemos el codigo minificado y este archivo que lee nuestro index.html


  vamos a index.html y en el lugar que teniamos el llamado a style.css lo remplazamos por nuestro archivo minificado y lo posicionamos para que se  lea primero la hoja de estilos luego el js y luego la fuente

  ahora git status
  git add -A
  git commit -m 'minify css'
  git push origin master

  vamos y recargamos nuestro sitio comprobamos que hicimos bien las cosas

  y vamos a pagespeed insights para analizar de nuevo



5-Critical CSS o Critical Path CSS

Para eliminar el bloqueo de la visualización solamente nos queda hacer Critical Path CSS.

Al momento de cargar un sitio este se encontrará sin estilos hasta el momento de cargar el CSS por completo generando que la visualización del sitio sea mala, para solucionar esto solamente debemos escribir el CSS necesario para el Above the fold dentro de nuestro HTML. Haremos uso del sitio Critical Path CSS Generator.

https://jonassebastianohlsson.com/criticalpathcssgenerator/

un ejemplo es que hasta este momento nuestr apagina esta cargando en blanco hasta que llegan los estilos y recien se cargan y le pone estilos a la pagina
esto es mala uX para el usuario

esto quiere decir que aun seguimos bloqueando el renderizado de estilos a nuestra pagina

sin embargo  cuando le pongamos formas en el primer pantallazo hacemos que la pagina  tenga mas alto y con este primer pantallaso ya no va a meter a nuestor style.min.css y asi esto ya no va a pasar 

entonces lo que tenemos que hacer es extraer el css del header, el hero y  portfolio, no nos interesa el resto

entonces vamos a el website recomendado por esta clase

en este sitio ponemos nuestra ruta y nuestra hoja de estilos, entonces el compara lo que se renderiza en el primer pantallazo y lo va a extraer y ese codigo lo extrae de nuestra hoja de estilos

copiamos nuestros style.css y lo pegamos en este sitio web, y nos da los estilos que necesita nuestro sitio en la parte superior ese primer pantalazo

teniendo eso lo copiamos y lo pegamos dentro de una etiqueta style en nuestro index.html

es un monton de codigo minificado pero es solo el de ese primer pantallazo

ahora solo por experimentar comentamos nuestro llamado a la hoija de estilos y abrimos en el navegador el archivo index.html y vemos que carga bien el primer pantallazo pero luego no tiene estilos, esto es critical css 

descomentamos la linea que llama a los estilos y recargamos en el navegador

ahora vamos a donde pusimos este critical css estamos cargando las fuentes con ../, esto no hace falta en critical css, asi que tomamos esos selectores ../, y los eliminamos asi no causa problemas en el futuro

git status
git add -A
git commit -m 'critical css'
git push origin master

recargamos la pagina hasta ver que todo va bien 

y ahora pasamos por el pagespeed insights

y ya no sale el bloqueo de css , es un avance pero faltan cosas que haremos en nuestra proxima clase



6-Optimizando Imágenes

Para tener nuestro sitio totalmente optimizado solamente nos queda optimizar nuestras imágenes.
Algunas veces estaremos renderizando una imagen con un tamaño mucho mayor del que tenemos en el sitio, por ello es buena práctica redimensionar nuestras imágenes al tamaño que mostramos en nuestro sitio, usaremos el servicio de ResizeImage.
No basta solamente con redimensionar nuestras imágenes, también debemos comprimirlas y de preferencia tenerlas en formato PNG para evitar perdidas en la calidad de imagen, para esto usaremos el servicio Tiny PNG.

como ejercicio revisemos desde la consola  en el navegador las dimensiones de nuestras imagenes para compara sus tamaños en la pagina a sus tamaños reales

lugo vamos  usar entnces la herramienta  REsizeImage

https://resizeimage.net/

vamos a cambiar los formatos a png de as imagenes, ya que en la teoria nos dice que un formato de png y un formato de gif son formatos de perdida de calidad en su compresion, entonces usaremos este consejo

entonces en ResizeImage seleccionemos la imagen de hero.jpg de nuestro proyecto y lo primero que hacemos es pasarla a png en la opcopn 'select the output image format'

agreguemos la proporcion a la cual queremos redimensionar esa imagen en la opciopn 'Crop your image' esa opcion nos permite seleccionar solo una parte de esta imagen, entonces en esta opcion seleccionamos

fixed aspect ratio 

luego elegimos la proporcion que queremos seguir 500 * 300 

siguiente es poner u na selecion de area  W: 500 H: 300 y nos sale el cuadro de seleccion, este aparece pequeño en comparacion al tamaño natural de la imagen

entonces escalemos esa seleccion a donde la imagen nos guste si queremos  o podemos escalarla toda si es necesario

entonces le damos click en crop

ahi se recorta la imagen y se redimensiona

ahora hacemos un redimensionamiento a que sea 500 * 300 que es el espacio que tiene en el index.html esto en la opcion  'Rezise your image' y que este seleccionada keep aspect radio

luego de esto  en la opcion 'optimize your image' le damos click en resize Image

luego de unos segundos podemos verla sercargarla y mas, vamos a descargarla
 

 ahora esta imagen la vamos a comprimir porque puede tener un mejor peso

 entonces vamos a tiniPng 
 https://tinypng.com/
 y en este sitio web arrastramos la imagen que acabamos de descargar, esto porque tinypng tiene un buen algoritmo de compression

 luego de esto descargamos esa imagen, vamos a las descargas y mandamos esa imagen al area de images en nuestro proyecto


 ahora dupliquemos esa carpeta images  y le ponemos originals entonces tenemos imagenes y originals

 originals contiene las imagenes originales entonces de esta carpeta eliminamos la imagen nueva la de la redimension

 y de images eliminamos el hero.jpg porque usaremos la nueva imagen y la renombramos 'hero.png'

 ahora vamos a index.html y cambiamos el llamado a esta imagen para que se cargue la nueva